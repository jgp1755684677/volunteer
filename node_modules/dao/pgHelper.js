//引用pg模块
var pg = require('pg');
//定义链接的数据库名称密码地址端口号
var conString = 'postgres://postgres:123@127.0.0.1:5432/postgres';

//定义客户端
var client = new pg.Client(conString);

//
var PG = function () {
    console.log("准备向postgres数据库链接...");
};

//获得连接
PG.prototype.getConnection = function () {
    client.connect(function (err) {
        if (err) {
            return console.error('could not connect to postgres', err);
        }
        client.query('SELECT NOW() AS "theTime"', function (err, result) {
            if (err) {
                return console.error("error running query", err);
            } else {
                console.log("postgres数据库连接成功...");
            }
        });
    });
};

//定义查询函数
var clientHelper = function (str, value, cb) {
    client.query(str, value, function (err, result) {
        if (err) {
            cb('err');
        } else {
            if (result.rows != undefined) {
                cb(result.rows);
            } else {
                cb();
            }
        }
    });
};

//增
PG.prototype.save = function (tablename, fields, cb) {
    if (!tablename) {
        return;
    }
    //获取整个表格中的用户数量

    PG.prototype.select(tablename, '', '', function (result) {
        var id = 1;
        var idnum = [];
        for (var j = 0; j < result.length; j++) {
            idnum.push(result[j].id);
        }
        for (var id = 1; id < (result.length + 2); id++) {
            if (idnum.indexOf(id) == -1) {
                var str = "insert into " + tablename + "(";
                var field = ['id'];
                var value = [id];
                var num = ['$1'];
                var count = 1;
                for (var i in fields) {
                    count++;
                    field.push(i);
                    value.push(fields[i]);
                    num.push("$" + count);
                }
                str += field.join(",") + ") values(" + num.join(",") + ")";
                clientHelper(str, value, cb);
                break;
            }
        }
        // if (id in idnum) {
        //     id++;
        // }
        // else{
        //     var id = result.length + 1;
        //     var str = "insert into " + tablename + "(";
        //     var field = ['id'];
        //     var value = [id];
        //     var num = ['$1'];
        //     var count = 1;
        //     for(var i in fields){
        //         count++;
        //         field.push(i);
        //         value.push(fields[i]);
        //         num.push("$" + count);
        //     }
        //     str += field.join(",")  + ") values(" + num.join(",") + ")";
        //     clientHelper(str, value, cb);
        // }
    });
};

//删除

PG.prototype.remove = function (tablename, fields, cb) {
    if (!tablename) {
        return;
    }
    var str = "delete from " + tablename + " where ";
    var field = [];
    var value = [];
    var count = 0;
    for (var i in fields) {
        count++;
        field.push(i + "=$" + count);
        value.push(fields[i]);
    }
    str += field.join(" and ");
    clientHelper(str, value, cb);
};

//修改
PG.prototype.update = function (tablename, mainfields, fields, cb) {
    if (!tablename) {
        return;
    }
    var str = "update " + tablename + " set ";
    var field = [];
    var value = [];
    var count = 0;
    for (var i in fields) {
        count++;
        field.push(i + "=$" + count);
        value.push(fields[i]);
    }
    str += field.join(",") + " where ";
    field = [];
    for (var j in mainfields) {
        count++;
        field.push(j + "=$" + count);
        value.push(mainfields[j]);
    }
    str += field.join(" and ");
    console.log(str, value);
    clientHelper(str, value, cb);
};

//查询
PG.prototype.select = function (tablename, fields, returnfields, cb) {
    if (!tablename) {
        return;
    }
    var returnStr = "";
    if (returnfields.length == 0) {
        returnStr = "*";
    } else {
        returnStr = returnfields.join(",");
    }
    if (fields == 0) {
        var str = "select " + returnStr + " from " + tablename;
        var value = [];
    } else {
        var str = "select " + returnStr + " from " + tablename + " where ";
        var field = [];
        var value = [];
        var count = 0;
        for (var i in fields) {
            count++;
            field.push(i + "=$" + count);
            value.push(fields[i]);
        }
        str += field.join(" and ");
    }
    clientHelper(str, value, cb);
};

/* 关联查询函数 */

PG.prototype.selectpolygon_gdpByNumber = function (tablename, fields, returnfields, cb) {
    if (!tablename) {
        return;
    }
    var returnStr = "";
    /* 判断返回字段为空 */
    if (returnfields.length == 0) {
        /* 返回所有的字段 */
        returnStr = "*";
    } else {
        /* 返回指定字段 */
        returnStr = returnfields.join(",");
    }
    var str = "";
    /* 判断查询字段是否为空 */
    if (fields == 0) {
        /* 查询表中所有数据 */
        str = "select " + returnStr + " from " + tablename;
    } else {
        /* 查询条件数据 */
        str = "select " + returnStr + " from " + tablename + " where polygon_number = '" + fields + "' order by year";
    }
    clientHelper(str, '', cb);
};

//模块输出
module.exports = new PG();